FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# Petitions API

Petitions API allows users to create and sign petitions.

# Group Clients/Token generation

## Authenitcate

### Using Username and Password [POST /oauth/token]

+ Attributes
    + grant_type: `password` (string, required) - Grant type
    + client_id: `2` (number, required) - Client id
    + client_secret: `PyCn2w5WuVSHGqkLQ1F7RXOqgOLJaOJ2qNPUiTpN` (string, required) - Client secret
    + username: `Jg4m9SJgp5@gmail.com` (string, required) - username of the user trying to access
    + password: `secret88` (string, required) - Password of the user trying to access
    
+ Response 400 (application/json)

        {
            "error": "unsupported_grant_type",
            "message": "The authorization grant type is not supported by the authorization server.",
            "hint": "Check the `grant_type` parameter"
        }
        
+ Responose 400 (application/json)

        {
            "error": "invalid_request",
            "message": "The request is missing a required parameter, includes an invalid parameter value, includes a parameter more than once, or is otherwise malformed.",
            "hint": "Check the `username` parameter"
        }
        
+ Response 401 (application/json)

        {
            "error": "invalid_client",
            "message": "Client authentication failed"
        }
        
+ Response 200 (application/json)

        {
            "token_type": "Bearer",
            "expires_in": 31536000,
            "access_token": "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImY1NGFkNWUyNWFhZWJiODAxNzU4NmNkNzc5OTc0OTkwMjBjNjhjNGQ0YmU3NzdmMDVhMzlmZTc1ZTk4OTdlNDQ0MDI1ODc1ZGFhYTc1ZDBlIn0.eyJhdWQiOiIyIiwianRpIjoiZjU0YWQ1ZTI1YWFlYmI4MDE3NTg2Y2Q3Nzk5NzQ5OTAyMGM2OGM0ZDRiZTc3N2YwNWEzOWZlNzVlOTg5N2U0NDQwMjU4NzVkYWFhNzVkMGUiLCJpYXQiOjE0OTE0NDE1NDEsIm5iZiI6MTQ5MTQ0MTU0MSwiZXhwIjoxNTIyOTc3NTQxLCJzdWIiOiI0Iiwic2NvcGVzIjpbXX0.GOx-VfmDlUDb3wtXCY3F4hTpPo0ydBDeyYrrbHJVmUiUlgoc2DtQIA-BJH_xJMwURRTeRWZ0RjvpLBk7paRikqyc1pWu3U_1WNBE-i1l5s6fwZ8IKt8pnO0aR7p1rurgpbvt-ngTpMTckVt2SaTmsh-PSUG_TWZey2E7y6L_PjPsgvfcbP0FBhXu7NMfo3f5lK-o4tWNWSnxRbN6VZFMfE4QuzhVTap40jpe1PAJ9WnRNloyp3tjGXYKZP47E93zhw0Be5a1E-DmVk45RvIepenCmc2RPh80jOuHu8AbO3TA1MpfglUfNrsvbNiNgoG3kdpFEDz5__ah3bS6_Rv767K_XBJTLrnYsljGwBlRLnOHcFmCp2ct3qJeJDhPnKeW8vOmRhywhvrBS-wVKkVvpvUeS0O-LckoYnBjiMbZSxHr9EQz6npfqFxGD6bMYR8T5b_VVTRvtilASqDE6tr_vJ2auM8646hTElfimDnNB2KdQGVAHaqpY13jjVc8sCcoiSOF-BayOY60b1UXlAPYfTsaLBSx6ESAzsqQcK5VTUHS-55JJztFa6rmEcYDgu2w4lSxLGbYI22woBxS7HXfzogj9Z85nsaBJ8NHVKFq6pIsqs4py6d62wD_1x0ULBozhN5oh0P28t--OfUtfXSpGd7G0tAuZRXmuJV5XY2jNGs",
            "refresh_token": "M/zco7OajGHV5dwECGacT6su2Ohz6QthuNNhDdaTs4cYm9UClI9qATJovXcV2jxxfqJrtsqxbCMZ7GBo+FpUnE+asUQcnNSNXZ8+WANMGtVvVvyJvwpirvo3l3/BfjHI97EE/sUd7Kj/+2SP7NsdwA3Thk8PRHy74AeK7nR+gGT/QDUxS9JhuWNTyGWjaLGDGpAnM0mIo43n9l3P/Itn08YkmXyN6IgElpDKJUwXtqC1XI9ENzFEFW3HC2+tM+Hz83zR2Tvk4wyRP0lDqtFhLF1b6lBPootiECzwbBDV21YQxGJS/FCrNF2xZsesUTwn3rEwnSFtlAHf2RuB+c5hZdAU9F2GKzHN3TJ7X8cLHsKL7eqz/gIZ8iDkho0YETQTiYauD5MZuwH8VXlKtZU5IgHc4kd3a5AWnEdQ6DVr+iXG75TKdK3gWWEmaV2RdnSNmtCBuFuqPPEcaJEA9Gik30T+fWEA8yKH+xC+2Dk7Em6YZuzHifv4f8CTW/lb4NCvomPpXrCN0aOughWpDIptKOb6hll5GtbgbgSC5raDMIK8f/Bx4bkh3gkYF94AG38omwN+hs4a9z1/SLrk9iELnoKINszFuB5UemoiQvZMYaeinzMOeb2TASkkfy8Tb1Z28fGGoeyHE5dp+61BjD/VQBwWuDAWPco13rmZhHpibDA="
        }

# Group User

## Manage users [/users]

### List All Users [GET /users{?per_page,page}]

+ Parameters
    + per_page (number, optional) - Number of records to show per request.
        - Default: `20`
    + page (number, optional) - Current page number.
        - Default: `1`
        
+ Response 401 (text/html; charset=UTF-8)

        Unauthorized.
+ Response 200 (application/json)
    + Attributes
        - total: `200` (number) - Total number of records,
        - per_page: `20` (number) - Number of records per request,
        - current_page: `2` (number) - Current page number,
        - last_page: `10` (number) - Last page number,
        - next_page_url: `/users/?page=3` (string) - Resource URL to access next page,
        - prev_page_url: `/users/?page=1` (string) - Resource URL to access previous page,
        - from: `21` (number) - First record's number,
        - to: `40` (number) - Last record's number,
        - data (array[User Public]) - Array of user objects

### Search Users [GET /users/search{?filter,per_page,page}]

+ Parameters
    + filter (string, required) - Search string.
        - Default: `test`
    + per_page (number, optional) - Number of records to show per request.
        - Default: `20`
    + page (number, optional) - Current page number.
        - Default: `1`

+ Response 401 (text/html)

        Unauthorized.

+ Response 200 (application/json)
    + Attributes
        - total: `200` (number) - Total number of records,
        - per_page: `20` (number) - Number of records per request,
        - current_page: `2` (number) - Current page number,
        - last_page: `10` (number) - Last page number,
        - next_page_url: `/users/?page=3` (string) - Resource URL to access next page,
        - prev_page_url: `/users/?page=1` (string) - Resource URL to access previous page,
        - from: `21` (number) - First record's number,
        - to: `40` (number) - Last record's number,
        - data (array[User Public]) - Array of user objects

### Create a New User [POST]

+ Request (application/json)
    + Attributes
        - email: `` (string, required) - Email id.
        - first_name: `` (string, required) - First name.
        - last_name: `` (string, required) - Last name.
        - password: `` (string, required) - Password.
        - password_confirmation: `` (string, required) - Password confirmation.

+ Response 422 (application/json)

        {
            "first_name": [
                "The first name field is required."
            ],
            "last_name": [
                "The last name field is required."
            ],
            "email": [
                "The email field is required."
            ],
            "password": [
                "The password field is required."
            ]
        }

+ Request (application/json)
    + Attributes
        - email: `user@domain.com` (string, required) - Email id.
        - first_name: `Jane` (string, required) - First name.
        - last_name: `Doe` (string, required) - Last name.
        - password: `pass1234` (string, required) - Password.
        - password_confirmation: `pass1234` (string, required) - Password confirmation.


+ Response 201 (application/json)

    + Attributes (User Public)
    
        
## Specfic user [/users/{id}]

+ Parameters
    + id: `1` (number, required) - Id of a user.

### Show details [GET]

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }

+ Response 200 (application/json)
    + Attributes (User Public)

## Active user [/users/me]

### Show details [GET]

+ Response 401 (text/html)

        Unauthorized.

+ Response 200 (application/json)
    + Attributes (User)

### Update details [PUT]

+ Request (application/json)
    + Attributes (User Fillable)

+ Response 401 (text/html)

        Unauthorized.
    
+ Response 203 (application/json)
    + Attributes (User)

### Update password [PUT /users/me/password]

+ Request (application/json)
    + Attributes
        - current_password: `pass1234` (string, required) - Current password,
        - password: `pass6789` (string, required) - New password,
        - password_confirmation: `pass6789` (string, required) - Password confirmation

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 422 (application/json)

        {
            "current_password": [
                "The current password field is required."
            ],
            "password": [
                "The password field is required."
            ]
        }
        
+ Response 409 (application/json)

        {
            "success": false,
            "message": "Wrong current password."
        }

+ Response 200 (application/json)
    + Attributes
        - success: `true` (boolean) - Status,
        - message: `Password changed` (string) - Message
        
+ Response 400 (application/json)
    + Attributes
        - success: `false` (boolean) - Status,
        - message: `Wrong current password.` (string) - Message

### List/search created organizations [GET /users/me/organizations{?filter,per_page,page}]

+ Parameters
    + filter: (string, optional) - Search string.
    + per_page: `20` (number, optional) - Number of records to show per request.
        - Default: `20`
    + page: `1` (number, optional) - Current page number.
        - Default: `1`

+ Response 401 (text/html)

        Unauthorized.

+ Response 200 (application/json)
    + Attributes
        - total: `200` (number) - Total number of records,
        - per_page: `20` (number) - Number of records per request,
        - current_page: `2` (number) - Current page number,
        - last_page: `10` (number) - Last page number,
        - next_page_url: `/users/?page=3` (string) - Resource URL to access next page,
        - prev_page_url: `/users/?page=1` (string) - Resource URL to access previous page,
        - from: `21` (number) - First record's number,
        - to: `40` (number) - Last record's number,
        - data (array[Organization Public]) - Array of organization objects

### List/search memberships [GET /users/me/memberships{?filter,per_page,page}]

+ Parameters
    + filter: (string, optional) - Search string.
        - Default: `te`
    + per_page: `20` (number, optional) - Number of records to show per request.
        - Default: `20`
    + page: `1` (number, optional) - Current page number.
        - Default: `1`

+ Response 401 (text/html)

        Unauthorized.

+ Response 200 (application/json)
    + Attributes
        - total: `200` (number) - Total number of records,
        - per_page: `20` (number) - Number of records per request,
        - current_page: `2` (number) - Current page number,
        - last_page: `10` (number) - Last page number,
        - next_page_url: `/users/?page=3` (string) - Resource URL to access next page,
        - prev_page_url: `/users/?page=1` (string) - Resource URL to access previous page,
        - from: `21` (number) - First record's number,
        - to: `40` (number) - Last record's number,
        - data (array[Organization Public]) - Array of organization objects

### List/Search Accessbile Targets [GET /users/me/accessible-targets{?filter,per_page,page}]

+ Parameters
    + filter: (string, optional) - Search string.
        - Default: `te`
    + per_page: `20` (number, optional) - Number of records to show per request.
        - Default: `20`
    + page: `1` (number, optional) - Current page number.
        - Default: `1`

+ Response 401 (text/html)

        Unauthorized.

+ Response 200 (application/json)
    + Attributes
        - total: `200` (number) - Total number of records,
        - per_page: `20` (number) - Number of records per request,
        - current_page: `2` (number) - Current page number,
        - last_page: `10` (number) - Last page number,
        - next_page_url: `/users/?page=3` (string) - Resource URL to access next page,
        - prev_page_url: `/users/?page=1` (string) - Resource URL to access previous page,
        - from: `21` (number) - First record's number,
        - to: `40` (number) - Last record's number,
        - data (array[Target]) - Array of target objects

### List/Search Created Targets [GET /users/me/targets{?filter,per_page,page}]

+ Parameters
    + filter: (string, optional) - Search string.
        - Default: `te`
    + per_page: `20` (number, optional) - Number of records to show per request.
        - Default: `20`
    + page: `1` (number, optional) - Current page number.
        - Default: `1`

+ Response 401 (text/html)

        Unauthorized.

+ Response 200 (application/json)
    + Attributes
        - total: `200` (number) - Total number of records,
        - per_page: `20` (number) - Number of records per request,
        - current_page: `2` (number) - Current page number,
        - last_page: `10` (number) - Last page number,
        - next_page_url: `/users/?page=3` (string) - Resource URL to access next page,
        - prev_page_url: `/users/?page=1` (string) - Resource URL to access previous page,
        - from: `21` (number) - First record's number,
        - to: `40` (number) - Last record's number,
        - data (array[Target]) - Array of target objects

### List/Search Created Petitions [GET /users/me/petitions{?filter,per_page,page}]

+ Parameters
    + filter: (string, optional) - Search string.
        - Default: `te`
    + per_page: `20` (number, optional) - Number of records to show per request.
        - Default: `20`
    + page: `1` (number, optional) - Current page number.
        - Default: `1`

+ Response 401 (text/html)

        Unauthorized.

+ Response 200 (application/json)
    + Attributes
        - total: `200` (number) - Total number of records,
        - per_page: `20` (number) - Number of records per request,
        - current_page: `2` (number) - Current page number,
        - last_page: `10` (number) - Last page number,
        - next_page_url: `/users/?page=3` (string) - Resource URL to access next page,
        - prev_page_url: `/users/?page=1` (string) - Resource URL to access previous page,
        - from: `21` (number) - First record's number,
        - to: `40` (number) - Last record's number,
        - data (array[Petition Public]) - Array of target objects

### List/search media [GET /organizations/{organization_id}/media{?filter,per_page,page}]
+ Parameters
    + filter: `john` (string) - Filter to search against media title.
    + per_page: `20` (number) - Number of items per page.
        - Default `20`
    + page: `1` (number) - Number of items per page.
        - Default `1`

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 403
+ Response 200 (application/json)
    + Attributes
        - total: `200` (number) - Total number of records,
        - per_page: `20` (number) - Number of records per request,
        - current_page: `2` (number) - Current page number,
        - last_page: `10` (number) - Last page number,
        - next_page_url: `` (string) - Resource URL to access next page,
        - prev_page_url: `` (string) - Resource URL to access previous page,
        - from: `21` (number) - First record's number,
        - to: `40` (number) - Last record's number,
        - data (array[Media]) - Array of user objects

### Upload media [POST /organizations/{organization_id}/media]
+ Request (multipart/form-data)
    + Attributes (Media Fillable)

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 403
+ Response 201 (application/json)
    + Attributes (Media)

# Group Organization

## List/Search/Create organizations [/organizations]

### List all organizations [GET /organizations{?per_page,page}]

+ Parameters
    + per_page (number, optional) - Number of records to show per request.
        - Default: `20`
    + page (number, optional) - Current page number.
        - Default: `1`

+ Response 401 (text/html)

        Unauthorized.

+ Response 200 (application/json)
    + Attributes
        - total: `200` (number) - Total number of records,
        - per_page: `20` (number) - Number of records per request,
        - current_page: `2` (number) - Current page number,
        - last_page: `10` (number) - Last page number,
        - next_page_url: `/users/?page=3` (string) - Resource URL to access next page,
        - prev_page_url: `/users/?page=1` (string) - Resource URL to access previous page,
        - from: `21` (number) - First record's number,
        - to: `40` (number) - Last record's number,
        - data (array[Organization Public]) - Array of user objects

### Search Organizations [GET /organizations/search{?filter,per_page,page}]
+ Parameters
    + filter: (string, required) - Search string.
        - Default: `te`
    + per_page: `20` (number, optional) - Number of records to show per request.
        - Default: `20`
    + page: `1` (number, optional) - Current page number.
        - Default: `1`

+ Response 401 (text/html)

        Unauthorized.

+ Response 200 (application/json)
    + Attributes
        - total: `200` (number) - Total number of records,
        - per_page: `20` (number) - Number of records per request,
        - current_page: `2` (number) - Current page number,
        - last_page: `10` (number) - Last page number,
        - next_page_url: `` (string) - Resource URL to access next page,
        - prev_page_url: `` (string) - Resource URL to access previous page,
        - from: `21` (number) - First record's number,
        - to: `40` (number) - Last record's number,
        - data (array[Organization Public]) - Array of user objects

### Create organization [POST]

+ Request (application/json)
    + Attributes (Organization Fillable)
    
+ Response 401 (text/html)

        Unauthorized.
    
+ Response 422 (application/json)

        {
            "name": [
                "The name field is required."
            ],
            "country_code": [
                "The country code field is required."
            ]
        }
    
+ Response 201 (application/json)
    + Attributes (Organization)
    
## Specific Organization [/organizations/{id}]
+ Parameters
    + id: `1` (number, required) - Id of an organization.

### Get details [GET]
+ Response 401 (text/html)

        Unauthorized.
    
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 403 (application/json)
+ Response 200 (application/json)
    + Attributes (Organization Public)

### Update details [PUT]
+ Request (application/json)
    + Attributes (Organization Fillable)
+ Response 401 (text/html)

        Unauthorized.

+ Response 422 (application/json)

        {
            "name": [
                "The name field is required."
            ],
            "country_code": [
                "The country code field is required."
            ]
        }

+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 403 (application/json)

        {
                "message": "Access denied."
        }
    
+ Response 200 (application/json)
    + Attributes (Organization)

### List/search created petitions [GET /organizations/{id}/petitions{?filter,per_page,page}]
+ Parameters
    + id: `1` (number, required) - Id of an organization.
    + filter: `te` (string) - Filter string.
    + per_page: `20` (number) - Number of items per page.
        - Default `20`
    + page: `1` (number) - Number of items per page.
        - Default `1`
        
+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 403
+ Response 200 (application/json)
    + Attributes
        - total: `200` (number) - Total number of records,
        - per_page: `20` (number) - Number of records per request,
        - current_page: `2` (number) - Current page number,
        - last_page: `10` (number) - Last page number,
        - next_page_url: `` (string) - Resource URL to access next page,
        - prev_page_url: `` (string) - Resource URL to access previous page,
        - from: `21` (number) - First record's number,
        - to: `40` (number) - Last record's number,
        - data (array[Petition Public]) - Array of petition objects

### List/search created targets [GET /organizations/{id}/targets{?filter,per_page,page}]
+ Parameters
    + id: `1` (number, required) - Id of an organization.
    + filter: `te` (string) - Filter string.
    + per_page: `20` (number) - Number of items per page.
        - Default `20`
    + page: `1` (number) - Number of items per page.
        - Default `1`
        
+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 403
+ Response 200 (application/json)
    + Attributes
        - total: `200` (number) - Total number of records,
        - per_page: `20` (number) - Number of records per request,
        - current_page: `2` (number) - Current page number,
        - last_page: `10` (number) - Last page number,
        - next_page_url: `` (string) - Resource URL to access next page,
        - prev_page_url: `` (string) - Resource URL to access previous page,
        - from: `21` (number) - First record's number,
        - to: `40` (number) - Last record's number,
        - data (array[Target]) - Array of target objects
        
## Manage Members [/organizations/{id}/members]

+ Parameters
    + id: `1` (number, required) - Id of an organization.

### List/Search Members [GET /organizations/{id}/members{?filter,per_page,page}]

+ Parameters
    + filter: `john` (string) - Filter to search against member email.
        - Default ``
    + per_page: `20` (number) - Number of items per page.
        - Default `20`
    + page: `1` (number) - Number of items per page.
        - Default `1`

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 403
+ Response 200 (application/json)
    + Attributes
        - total: `200` (number) - Total number of records,
        - per_page: `20` (number) - Number of records per request,
        - current_page: `2` (number) - Current page number,
        - last_page: `10` (number) - Last page number,
        - next_page_url: `` (string) - Resource URL to access next page,
        - prev_page_url: `` (string) - Resource URL to access previous page,
        - from: `21` (number) - First record's number,
        - to: `40` (number) - Last record's number,
        - data (array[Member]) - Array of user objects

### Add a member [POST /organizations/{id}/members]

+ Request (application/json)
    + Attributes
        + user (enum,required) - User id or email.
            - 1034 (number) - User Id
            - john.doe@example.com (string) - User's email.
        + roles (array[number]) - Ids of roles that must be assigend to this member.

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 403 (application/json)
    + Attributes
        + messages: `Unauthorized access` (string) - Error message from the server.
+ Response 201 (application/json)
    + Attributes
        + message: `New member added` (string) - Success message from the server.
        
## Manage a member [/organizations/{organization_id}/members/{user_id}]

+ Parameters
    + organization_id: `1` (number, required) - Id of the organization.
    + user_id: `1` (number, required) - Id of the user who is a member of the organization.

### View details of a member [GET]

+ Response 401 (text/html)

        Unauthorized.
    
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 403 (application/json)
    + Attributes
        + messages: `Unauthorized access` (string) - Error message from the server.
+ Response 200 (application/json)
    + Attributes
        + organization: (Organization) - The organization.
        + user: (User) - The user.
        + roles: (array[Role Compact]) -  Roles assigend to this user under this organization.

### List assigned roles [GET /organizations/{organization_id}/members/{user_id}/roles]

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 200 (application/json)
    + Attributes
        - total: `2` (number) - Number of records,
        - data: (array[Role]) - Roles assigned

### Assign role(s) [POST /organizations/{organization_id}/members/{user_id}/roles]

+ Request (application/json)
    + Attributes
        - roles: [1, 2] (array[number]) - An array of one or more role ids to be assigned.

+ Response 401 (text/html)

        Unauthorized.

+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 201 (application/json)
    + Attributes
        - message: `Roles added` (string) - Success message form server.
        - data: (array[Role]) - Roles that were assigned.

### Remove role(s) [DELETE /organizations/{organization_id}/members/{user_id}/roles]
+ Request (application/json)
    + Attributes
        - roles: [1, 2] (array[number]) - An array of one or more role ids to be removed.

+ Response 401 (text/html)

        Unauthorized.

+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
    
+ Response 204 (application/json)
    + Attributes
        - message: `Roles removed` (string) - Success message form server.
        - data: (array[Role]) - Roles that were removed.

### Set roles(s) [PUT /organizations/{organization_id}/members/{user_id}/roles]
+ Request (application/json)
    + Attributes
        - roles: [1, 2] (array[number]) - An array of one or more role ids to be set.

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 200 (application/json)
    + Attributes
        - message: `Roles set` (string) - Success message form server.
        - data: (array[Role]) - Present roles.

### Delete a member [DELETE]

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 203 (application/json)

## Manage Organizational Roles [/organizations/{organization_id}/roles]

+ Parameters
    + organization_id: `1` (number, required) - Id of an organization.

### List all roles [GET /organizations/{organization_id}/all-roles]

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
    
+ Response 200 (application/json)
    + Attributes
        - total: `10` (number) - Total number of records,
        - data (array[Role]) - Array of roles

### List own roles [GET /organizations/{organization_id}/own-roles]

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
    
+ Response 200 (application/json)
    + Attributes
        - total: `10` (number) - Total number of records,
        - data (array[Role]) - Array of roles

### Create a role [POST]

+ Request (application/json)
    + Attributes (Role Fillable)

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
    
+ Response 201 (application/json)
    + Attributes (Role)

### Update a role [PUT /organizations/{organization_id}/roles/{role_id}]
+ Parameters
    + role_id: `2` (number, required) - Id of the role
        
+ Request (application/json)
    + Attributes (Role Fillable)

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
+ Response 403 (application/json)

        {
            "message": "Access denied."
        }
+ Response 422 (application/json)

        {
            "name": ["The name must be unique"]
        }
        
+ Response 200 (application/json)
    + Attributes (Role)

### Delete a role [DELETE /organizations/{organization_id}/roles/{role_id}]
+ Parameters
    + role_id: `2` (number, required) - Id of the role
        
+ Request (application/json)
    + Attributes (Role Fillable)

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
+ Response 403 (application/json)

        {
            "message": "Access denied."
        }
+ Response 203 (application/json)

        {
            "message": "Role deleted."
        }

## Resources [/organizations/{id}/resources]

+ Parameters
    + id: `1` (number, required) - Id of an organization.

### List/Search Targets [GET /organizations/{id}/targets{?filter,per_page,page}]

+ Parameters
    + filter: `john` (string, optional) - Filter to search against name.
        - Default ``
    + per_page: `20` (number, optional) - Number of items per page.
        - Default `20`
    + page: `1` (number, optional) - Number of items per page.
        - Default `1`
        
+ Response 401 (text/html)

        Unauthorized.
    
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 403
+ Response 200 (application/json)
    + Attributes
        - total: `200` (number) - Total number of records,
        - per_page: `20` (number) - Number of records per request,
        - current_page: `2` (number) - Current page number,
        - last_page: `10` (number) - Last page number,
        - next_page_url: `` (string) - Resource URL to access next page,
        - prev_page_url: `` (string) - Resource URL to access previous page,
        - from: `21` (number) - First record's number,
        - to: `40` (number) - Last record's number,
        - data (array[Target]) - Array of target objects

### List/Search Petitions [GET /organizations/{id}/petitions{?filter,per_page,page}]

+ Parameters
    + filter: `john` (string, optional) - Filter to search against name.
        - Default ``
    + per_page: `20` (number, optional) - Number of items per page.
        - Default `20`
    + page: `1` (number, optional) - Number of items per page.
        - Default `1`

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 403
+ Response 200 (application/json)
    + Attributes
        - total: `200` (number) - Total number of records,
        - per_page: `20` (number) - Number of records per request,
        - current_page: `2` (number) - Current page number,
        - last_page: `10` (number) - Last page number,
        - next_page_url: `` (string) - Resource URL to access next page,
        - prev_page_url: `` (string) - Resource URL to access previous page,
        - from: `21` (number) - First record's number,
        - to: `40` (number) - Last record's number,
        - data (array[Petition]) - Array of target objects

### List/search media [GET /organizations/{organization_id}/media{?filter,per_page,page}]
+ Parameters
    + filter: `john` (string) - Filter to search against media title.
        - Default ``
    + per_page: `20` (number) - Number of items per page.
        - Default `20`
    + page: `1` (number) - Number of items per page.
        - Default `1`

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 403
+ Response 200 (application/json)
    + Attributes
        - total: `200` (number) - Total number of records,
        - per_page: `20` (number) - Number of records per request,
        - current_page: `2` (number) - Current page number,
        - last_page: `10` (number) - Last page number,
        - next_page_url: `` (string) - Resource URL to access next page,
        - prev_page_url: `` (string) - Resource URL to access previous page,
        - from: `21` (number) - First record's number,
        - to: `40` (number) - Last record's number,
        - data (array[Media]) - Array of user objects

### Upload media [POST /organizations/{organization_id}/media]

+ Request (multipart/form-data)
    + Attributes (Media Fillable)

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 403
+ Response 201 (application/json)
    + Attributes (Media)

# Group Petition

## Create  [/petitions]

### Create a new petition [POST]
+ Request (application/json)
    + Attributes (Petition Fillable)

+ Response 401 (text/html)

        Unauthorized.
    
+ Response 403
+ Response 201 (application/json)
    + Attributes (Petition)
    
## Select  [/petitions/{petition_id}]

+ Parameters
    + petition_id: `1` (number, required) - The id of the petition.

### Show details of a petition [GET]

+ Response 401 (text/html)

        Unauthorized.
    
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 403
+ Response 200 (application/json)
    + Attributes (Petition)

### Update a petition [PUT]

+ Request (application/json)
    + Attributes (Petition Fillable)

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 403
+ Response 200 (application/json)
    + Attributes (Petition)

### Delete a petition [DELETE]

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 403
    + Attributes
        + message: `Error message` (string) - Error Message from server.
+ Response 203 (application/json)
    + Attributes
        + message: `Petition deleted` (string) - Message from server.

## Signatures [/petition/{id}/signatures{?per_page,page,start_date,end_date}]

+ Parameters
    + per_page: `20` (number, optional) - How many records to fetch
    + page: `1` (number, optional) - Current page number
    + start_date: `null` (string, optional) - Start date
    + end_date: `null` (string, optional) - End dat

### List/search signatures [GET]

List or search signatures received for a petition.

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 200 (application/json)
    + Attributes
        - total: `200` (number) - Total number of records,
        - per_page: `20` (number) - Number of records per request,
        - current_page: `2` (number) - Current page number,
        - last_page: `10` (number) - Last page number,
        - next_page_url: `` (string) - Resource URL to access next page,
        - prev_page_url: `` (string) - Resource URL to access previous page,
        - from: `21` (number) - First record's number,
        - to: `40` (number) - Last record's number,
        - data (array[Signature]) - Array of target objects

## Targets [/petition/{id}/targets]

### List petition targets [GET]

+ Response 401 (text/html)

        Unauthorized.

+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 200 (application/json)
    + Attributes
        - total: `200` (number) - Total number of records,
        - per_page: `20` (number) - Number of records per request,
        - current_page: `2` (number) - Current page number,
        - last_page: `10` (number) - Last page number,
        - next_page_url: `` (string) - Resource URL to access next page,
        - prev_page_url: `` (string) - Resource URL to access previous page,
        - from: `21` (number) - First record's number,
        - to: `40` (number) - Last record's number,
        - data (array[Target]) - Array of target objects

### Add targets(s) to petition [POST]
+ Request (application/json)
    + Attributes
        - targets: [2,3] (array[number], required) - Ids of targets to attach

+ Response 401 (text/html)

        Unauthorized.

+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 201 (application/json)
    + Attributes
        - message: `Targets added` (string) - Success message from server,
        - data: (array[Target]) - Array of targets that were attched

### Remove target(s) from petition [DELETE]
+ Request (application/json)
    + Attributes
        - targets: [2,3] (array[number], required) - Ids of targets to dettach.
        
+ Response 401 (text/html)

        Unauthorized.

+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
    
+ Response 203 (application/json)
    + Attributes
        - message: `Targets detached` (string) - Success message from server

#Group Target

## Create/Update/Delete Targets [/targets]

### Create a target [POST]

+ Request (application/json)
    + Attributes (Target Fillable)
    
+ Response 401 (text/html)

        Unauthorized.
        
+ Response 201 (application/json)
    + Attributes (Target)

### View Details of a target [GET /targets/{target_id}]

+ Parameters
    + target_id: `1` (number) - The id of the target

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 200 (application/json)
    + Attributes (Target)

### Update a target [PUT /targets/{target_id}]

+ Parameters
    + target_id: `1` (number) - The id of the target
+ Request (application/json)
    + Attributes (Target Fillable)
    
+ Response 401 (text/html)

        Unauthorized.

+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 200 (application/json)
    + Attributes (Target)

### Delete a target [DELETE /targets/{target_id}]

+ Parameters
    + target_id: `1` (number) - The id of the target

+ Response 401 (text/html)

        Unauthorized.

+ Response 404 (application/json)

        {
            "message": "Record not found."
        }
        
+ Response 203 (application/json)
    + Attributes
        - message: `Target deleted` (string) - Success message from server.

#Group Signature

## Create/delete [/signatures]

### Create a signature [POST]

+ Request (application/json)
    + Attributes (Signature Fillable)

+ Response 401 (text/html)

        Unauthorized.
        
+ Response 201 (application/json)
    + Attributes (Signature)

### Delete a signature [DELETE /signatures/{signature_id}]
+ Parameters
    + signature_id: `22` (number, required) - The id of the signature to delete.

+ Response 401 (text/html)

    Unauthorized.

+ Response 403 (application/json)

        {
            "message": "Access Denied."
        }
    
+ Response 404 (application/json)

        {
            "message": "Record not found"
        }
    
+ Response 204 (application/json)

        {
            "message": "Signature deleted"
        }
    
        
# Data Structures

## User Fillable (object)

- first_name: `John` (string, required) - Firstname of the user.
- last_name: `Doex` (string, required) - Lastname of the user.
- phone: `9446387282` (string) - Phone number.
- about_me: `Lorum ipsum` (string) - Description of user.
- address_1: `1600 Pennsylvania Ave N` (string) - Address line 1.
- address_2: `Opposite The Whitehouse` (string) - Address line 2.
- city: `Washington` (string) - City.
- zipcode: `20500` (number) - Zip/Postal code.
- country_code: `USA` (string) - Country code.
- facebook_handle: `johndoe` (string) - The facebook handle of this user.
- twitter_handle: `@johndoe` (string) - The twotter handle of this user.
- locale: `en-US` (string) - Locale.
- timzone: `UTC` (string) - Timezone.
- avatar_url: `http://api.petitions.io/images/hst352gs673.jpg` (string) - URL to the user's profile image if he has any.
- avatar_media_id: `234` (number) - An internal id to the user's profile image resource.


## User Public (object)

- id: `2` (number, required) - The unique ID of the user.
- Include User Fillable
- created_at: `2015-01-07T14:03:43Z` (string, required) - ISO8601 date and time of when the user was created.
- updated_at: `2015-01-07T14:03:43Z` (string, required) - ISO8601 date and time of when the user was updated.
- last_seen_at: `2015-01-07T14:03:43Z` (string) - ISO8601 date and time of when the user was last active.
- verfied_at: `2015-01-07T14:03:43Z` (string) - ISO8601 date and time of when this user's email was verified.
- avatar_url: `http://api.petitions.io/images/hst352gs673.jpg` (string) - URL to the user's profile image if he has any.
- avatar_media_id: `234` (number) - An internal id to the user's profile image resource.

## User (object)

- Include User Public
- email: `john.doe@petitons.io` (string) - Email id of the user.

## Member (object)

- Include User Public
- roles: (array[Role Compact]) - Roles assigedn to this member.


##Organization Fillable (object)
- name: `Organziation name` (string, required) - Name of the organziation.
- country_code: `USA` (string, required) - Three letter country code.
- mission:  (string) - Mission statement.
- address_1: (string) - Address line 1.
- address_2: (string) - Address line 2.
- state: (string) - name of state.
- city: (string) - City name.
- zipcode: (string) - Zipcode.
- website: (string) - URL to organization's website.
- twitter_handle: `` (string) - Twitter handle.
- avatar_url: `http://api.petitions.io/images/hst352gs673.jpg` (string) - URL to the profile image if there is any.
- avatar_media_id: (number) - Internal avatar media id.

##Organization (object)
- id: (number) - Internal id.
- Include Organization Fillable
- avatar_url: `http://api.petitions.io/images/hst352gs673.jpg` (string) - URL to the profile image if there is any.

##Organization Public (object)
- id: (number) - Internal id.
- Include Organization Fillable
- avatar_url: `http://api.petitions.io/images/hst352gs673.jpg` (string) - URL to the profile image if there is any.
- avatar_media_id: (number) - Internal avatar media id.

##Petition Fillable (object)
- title: `Petition title` (string, required) - Title of the petition.
- description: `Description` (string) - Description about the petition.
- mission: `Mission` (string) - Mission statement.
- goal: `Goal` (string) - Goal of this petition.
- owner_organization_id: null (number) - Id of the organization, if this is an organizational petition
- video_url: `https://youtube.com/<link>` (string) - A video url.
- image_url: `http://api.petitions.io/images/hst352gs673.jpg` (string) - URL to the image if there is any.
- image_media_id: `null` (number) - Internal id of the media image object.

##Petition Public (object)
- id: null (number) - Internal id of the petition.
- Include Petition Fillable
- image_url: `http://api.petitions.io/images/hst352gs673.jpg` (string) - URL to the image if there is any.
- owner_user_id: `1` (number) - Id of the user who created/owns this petition.
- signatures_count: `200` (number) - Number of signatures received.
- created_at: `2015-01-07T14:03:43Z` (string) - ISO8601 date and time of when the petition was created
- updated_at: `2015-01-07T14:03:43Z` (string) - ISO8601 date and time of when the petition was last updated.
- published_at: `2015-01-07T14:03:43Z` (string) - ISO8601 date and time of when the petition was published.
- ends_at: `2015-01-07T14:03:43Z` (string) - ISO8601 date and time of when the petition will close.

##Petition (object)
- Include Petition Public
- status: draft (enum, default) - The status of the petition.
    - draft (string)
    - published (string)

##Target Fillable (object)
- name: `Donald Trump` (string, required) - Name of target.
- title: `President of the USA` (string, required) - Title of the target.
- type: `other`(enum, default) - Type of target.
    - government (string)
    - organization (string)
    - company (string)
    - other (string)
- country_code: `USA` (string) - Three letter country code.
- state: `` (string) - State.
- city: `` (string) - City.
- avatar_url: `http://api.petitions.io/images/hst352gs673.jpg` (string) - URL to the image if there is any.
- avatar_media_id: `null` (number) - Internal id to avatar media object.
- owner_organization_id: `null` (number) - Id of the organization who owns this resource. 

##Target (object)
- id: (number) - Internal id.
- Include Target Fillable
- owner_user_id: `` (number) - The id of the user who created/owns this target.
- avatar_url: `` (string) - URL to the avatar image.
- created_at: `2015-01-07T14:03:43Z` (string) - ISO8601 date and time of when the target was created
- updated_at: `2015-01-07T14:03:43Z` (string) - ISO8601 date and time of when the target was last updated.

##Signature Fillable (object)
- petition_id: `2` (number, required) - The id of the petition that is being signed.
- email: (string, required) - The email of the signer.
- is_visible: `false` (boolean, required) - Is this signature visible to the public.
- first_name: `` (string) - First name of the signer.
- last_name: `` (string) - last name of the signer.
- comment: `` (string) - Comment.
- address_1: `` (string) - Address line 1.
- address_2: `` (string) - Address line 2.
- city: `` (string) - City.
- state: `` (string) - State.
- country_code: `USA` (string) - Three letter country code.
- zipcode: `` (string) - Zip code.
- locale: `en-US` (string) - Locale.
- timezone: `UTC` (string) - Timezone.
- source_ip: `` (string) - Source IP of signature.
- source_url: `` (string) - Source url.

##Signature (object)
- id: (number) - Internal id of this signature object.
- Include Signature Fillable
- created_at: `2015-01-07T14:03:43Z` (string) - ISO8601 date and time of when this object was created.
- updated_at: `2015-01-07T14:03:43Z` (string) - ISO8601 date and time of when this object was last updated.

##Role Fillable (object)
- name: `staff` (string, required) - Name.
- title: `Staff` (string, required) - Display name.
- permissions: `[1,2]` (array[number]) - An array of permission ids to be attached.
- description: `Role for staff` (string) - Description.

##Role Compact (object)
- id: (number) - Internal id.
- Include Role Fillable
- permissions: (array[Permission]) - Permissions attached to this role.
- organization_id: (number) - The id of the organization who owns this role (null if system role).

##Role Public (object)
- Include Role Compact
- permissions: (array[Permission]) - Permissions attached to this role.

##Role (object)
- Include Role Public
- created_at: `2015-01-07T14:03:43Z` (string) - ISO8601 date and time of when this object was created.
- updated_at: `2015-01-07T14:03:43Z` (string) - ISO8601 date and time of when this object was last updated.

##Permission (object)
- id: `2` (number) - Internal id.
- name: `petitions.create` (string) - Name.
- title: `Create petition` (string) - Descriptive title.
- description: `Allows the creation of petitions in an organization.` (string) - Description

##Media Fillable (object)
- title: `An image` (string) - The title.
- data: `bs6721nb223e7s7s` (string) - Encoded file data.
- type: `image/jpeg` (string) - Content type.


##Media (object)
- id: `2` (number) - Internal id.
- title: `An image` (string) - The title.
- type: `image/jpeg` (string) - Content type.
- url: `http://example.com/image.jpg` (string) - Url to the resource.
- owner_user_id: `2` (number) - Id of the user who created this resource.
- owner_organization_id (number) - Id of the organziation who owns this resource.
- created_at: `2015-01-07T14:03:43Z` (string) - ISO8601 date and time of when this object was created.
- updated_at: `2015-01-07T14:03:43Z` (string) - ISO8601 date and time of when this object was last updated.